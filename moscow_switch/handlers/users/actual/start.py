from loader import dp, bot

from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.storage import FSMContext
from aiogram import types

from sql import ActPlace, IventItem, User, UserStat, IventStatistic
from states import ACT, Ivent, Anketa
from keyboards.inline import interes_kb, profi_kb


@dp.message_handler(Text(contains='–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ', ignore_case=True))
@dp.message_handler(Text(contains='–ù–∞–∑–∞–¥', ignore_case=True), state=ACT.ivent)
async def start(message: Message):
    user = User.get(User.tg_id == message.from_user.id)

    if user.age == None:
        await message.answer("–ü–æ—Ö–æ–∂–µ –≤—ã —É –Ω–∞—Å –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –æ —Å–µ–±–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏.")
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ", reply_markup=ReplyKeyboardMarkup([
        [KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
    ], resize_keyboard=True))
        await Anketa.photo.set()
        return 0

    await ACT.started.set()

    _ck_ = await message.answer('<code>Clearing keyboard...</code>', reply_markup=ReplyKeyboardRemove())
    await _ck_.delete()

    kb = InlineKeyboardMarkup(row_width=1)
    link = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç', url='https://vk.com/')
    places = InlineKeyboardButton(text='–ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º', callback_data='to_ivents')
    main_menu = InlineKeyboardButton(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')
    kb.add(link, places, main_menu)

    await message.answer('–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥–ª—è —Å–µ–±—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –µ—â–µ –Ω–∞ –Ω–µ–≥–æ –∏–¥–µ—Ç. \n' \
                         '–¢–∞–∫–∂–µ —É –Ω–∞—Å –µ—Å—Ç—å –æ–±—â–∏–π —á–∞—Ç',
                         reply_markup=kb
                         )


@dp.callback_query_handler(text='to_ivents', state=ACT.started)
async def ivent_list(c: CallbackQuery, state: FSMContext):
    await ACT.ivent.set()

    places = [el for el in ActPlace.select()]

    await c.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–π—Ç–∏:", reply_markup=ReplyKeyboardMarkup([
        [KeyboardButton('–ù–∞–∑–∞–¥')]
    ], resize_keyboard=True))

    for place in places:
        await c.message.answer(text=f'{place.name} \n{place.desc}',
                             reply_markup=InlineKeyboardMarkup(row_width=1).add(
                                 InlineKeyboardButton(text='–Ø –ø–æ–π–¥—É', callback_data=f'{place.id}'))
                             )


@dp.callback_query_handler(state=ACT.ivent)
async def select_place(c: CallbackQuery, state: FSMContext):
    await Ivent.networking.set()
    await state.update_data({'user': -1})

    ivent = IventItem()
    ivent.users = c.from_user.id
    ivent.place = str(c.data)
    ivent.save()

    try:
        user_stat = UserStat.get(UserStat.tg_id == c.from_user.id)
        user_stat.visit_future = str(int(user_stat.visit_future) + 1)
        user_stat.save()
    except:
        user = User.get(User.tg_id == c.from_user.id)
        user_stat = UserStat()
        user_stat.tg_id = c.from_user.id
        user_stat.name = user.name
        user_stat.phone = user.phone
        user_stat.visit_now = 0
        user_stat.visit_future = 1
        user_stat.save()

    try:
        ivent_stat = IventStatistic.get(IventStatistic.place_id == c.data)
        ivent_stat.visit_future = str(int(ivent_stat.visit_future) + 1)
        ivent_stat.save()
    except:
        ivent_stat = IventStatistic()
        ivent_stat.place_id = c.data
        ivent_stat.place = ActPlace.get(ActPlace.id == c.data).name
        ivent_stat.visit_now = 0
        ivent_stat.visit_future = 1
        ivent_stat.save()

    users = [el.users for el in IventItem.select().where(IventItem.place == c.data)]
    users_list = []

    for user in users:
        print(user, users, c.from_user.id, users == c.from_user.id)
        if str(user) != str(c.from_user.id):
            users_list.append(user)

    if len(users_list) > 0:
        await c.message.answer(
            f"–ù–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –ø–æ–π—Ç–∏ –µ—â–µ {len(users_list)} —á–µ–ª–æ–≤–µ–∫. \n–í—ã –º–æ–∂–µ—Ç–µ –æ–±—å–µ–¥–µ–Ω–∏—Ç—å—Å—è –∏ –ø–æ–π—Ç–∏ "
            f"–≤–º–µ—Å—Ç–µ. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫?",
            reply_markup=InlineKeyboardMarkup(row_width=1).add(
                InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ç–æ –∏–¥—ë—Ç', callback_data=f"{c.data}")
            ).add(
                InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')
            ))
    else:
        await c.message.answer(f"–ö—Ä–æ–º–µ –≤–∞—Å –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±–æ–ª—å—à–µ –Ω–∏–∫—Ç–æ –Ω–µ –∏–¥–µ—Ç",
                               reply_markup=InlineKeyboardMarkup(row_width=1).add(
                                   InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')
                               ))


@dp.message_handler(content_types=['photo'], state=Anketa.photo)
async def set_photo(message: types.Message, state: FSMContext):
    user = User.get(User.tg_id == message.from_user.id)
    user.photo = message.photo[-1].file_id
    user.save()
    
    data = {
            'market': '‚ùå',
            'konsalt': '‚ùå',
            'bloger': '‚ùå',
            'freelancer': '‚ùå',
            'design': '‚ùå',
            'shop': '‚ùå',
            'buissnes': '‚ùå',
            'iskustvo': '‚ùå',
            'buti': '‚ùå',
            'it': '‚ùå',
            'psih': '‚ùå',
            'eat': '‚ùå',
            'stroy': '‚ùå',
            'soc': '‚ùå'
    }

    await state.update_data(data)

    await Anketa.profi.set()
    await message.answer("–ö–µ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å? –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π.", reply_markup=profi_kb(data))


@dp.callback_query_handler(state=Anketa.profi)
async def set_profi_kb(c: types.CallbackQuery, state: FSMContext):
    if c.data == 'compleet':
        data = await state.get_data()
        data_text = {
            'market': '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
            'konsalt': '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥',
            'bloger': '–ë–ª–æ–≥–µ—Ä',
            'freelancer': '–§—Ä–∏–ª–∞–Ω—Å–µ—Ä',
            'design': '–î–∏–∑–∞–π–Ω',
            'shop': '–¢–æ—Ä–≥–æ–≤–ª—è',
            'buissnes': '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å',
            'iskustvo': '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫',
            'buti': '–ë—å—é—Ç–∏',
            'it': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç',
            'psih': '–ü—Å–∏—Ö–æ–ª–æ–≥',
            'eat': '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã',
            'stroy': '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
            'soc': '–°–æ—Ü —Ä–∞–±–æ—Ç–Ω–∏–∫'
        }

        text = ''

        for el in data:
            if data[el] == '‚úÖ':
                text += f'{data_text[el]}, '

        text = text[:-2]

        user = User.get(User.tg_id == c.from_user.id)
        user.profession = text
        user.save()

        data = {
            'sport': '‚ùå',
            'walk': '‚ùå',
            'osozn': '‚ùå',
            'mistik': '‚ùå',
            'money': '‚ùå',
            'dance': '‚ùå',
            'health': '‚ùå',
            'alko': '‚ùå',
            'musik': '‚ùå',
            'moda': '‚ùå',
        }

        await state.finish()
        await Anketa.field_activity.set()
        await state.update_data(data)

        await c.message.edit_text(text="–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=interes_kb(data))

    else:
        data = await state.get_data()
        data[c.data] = '‚úÖ' if data[c.data] == '‚ùå' else '‚ùå'
        await state.update_data(data)

        await c.message.edit_text(text="–ö–µ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å? –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π.", reply_markup=profi_kb(data))


@dp.message_handler(state=Anketa.profi)
async def set_interes(message: types.Message, state: FSMContext):
    user = User.get(User.tg_id == message.from_user.id)
    user.profession = message.text
    user.save()

    data = {
        'sport': '‚ùå',
        'walk': '‚ùå',
        'osozn': '‚ùå',
        'mistik': '‚ùå',
        'money': '‚ùå',
        'dance': '‚ùå',
        'health': '‚ùå',
        'alko': '‚ùå',
        'musik': '‚ùå',
        'moda': '‚ùå',
    }

    await state.update_data(data)

    await Anketa.field_activity.set()
    await message.answer("–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=interes_kb(data))


@dp.callback_query_handler(state=Anketa.field_activity)
async def set_interes_kb(c: types.CallbackQuery, state: FSMContext):
    if c.data == 'compleet':
        data = await state.get_data()
        data_text = {
            'sport': '—Å–ø–æ—Ä—Ç',
            'walk': '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
            'osozn': '–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å',
            'mistik': '–º–∏—Å—Ç–∏–∫–∞',
            'money': '—Ñ–∏–Ω–∞–Ω—Å—ã',
            'dance': '—Ç—É—Å–æ–≤–∫–∏',
            'health': '–ó–û–ñ',
            'alko': '–≤–∏–Ω–∏—à–∫–æ',
            'musik': '–º—É–∑—ã–∫–∞',
            'moda': '–º–æ–¥–∞',
        }

        text = ''

        for el in data:
            if data[el] == '‚úÖ':
                text += f'{data_text[el]}, '

        text = text[:-2]

        user = User.get(User.tg_id == c.from_user.id)
        user.field_activity = text
        user.save()

        await Anketa.lenght.set()
        await c.message.answer("–ö–∞–∫–æ–≥–æ –≤—ã —Ä–æ—Å—Ç–∞(–≤ —Å–º):")

    else:
        data = await state.get_data()
        data[c.data] = '‚úÖ' if data[c.data] == '‚ùå' else '‚ùå'
        await state.update_data(data)

        await c.message.edit_text(text="–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=interes_kb(data))


@dp.message_handler(state=Anketa.field_activity)
async def activity(message: types.Message, state: FSMContext):
    text = message.text
    if len(text) > 10:

        user = User.get(User.tg_id == message.from_user.id)
        user.field_activity = text
        user.save()

        await Anketa.lenght.set()
        await message.answer("–ö–∞–∫–æ–≥–æ –≤—ã —Ä–æ—Å—Ç–∞(–≤ —Å–º):")

    else:
        data = await state.get_data()
        await Anketa.field_activity.set()
        await message.answer("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö", reply_markup=interes_kb(data))


@dp.message_handler(state=Anketa.lenght)
async def leng(message: types.Message):
    user = User.get(User.tg_id == message.from_user.id)
    user.length = message.text
    user.save()

    await Anketa.weight.set()
    await message.answer("–í–∞—à –≤–µ—Å:")


@dp.message_handler(state=Anketa.weight)
async def weight(message: types.Message):
    user = User.get(User.tg_id == message.from_user.id)
    user.weight = message.text
    user.save()

    await Anketa.age.set()
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç:")


@dp.message_handler(state=Anketa.age)
async def age(message: types.Message, state: FSMContext):
    user = User.get(User.tg_id == message.from_user.id)
    user.age = message.text
    user.save()

    await ACT.started.set()

    _ck_ = await message.answer('<code>Clearing keyboard...</code>', reply_markup=ReplyKeyboardRemove())
    await _ck_.delete()

    kb = InlineKeyboardMarkup(row_width=1)
    link = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç', url='https://vk.com/')
    places = InlineKeyboardButton(text='–ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º', callback_data='to_ivents')
    main_menu = InlineKeyboardButton(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')
    kb.add(link, places, main_menu)

    await message.answer('–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥–ª—è —Å–µ–±—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –µ—â–µ –Ω–∞ –Ω–µ–≥–æ –∏–¥–µ—Ç. \n' \
                         '–¢–∞–∫–∂–µ —É –Ω–∞—Å –µ—Å—Ç—å –æ–±—â–∏–π —á–∞—Ç',
                         reply_markup=kb
                         )
