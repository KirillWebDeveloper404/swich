from loader import dp, Bot

import datetime
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.storage import FSMContext
from aiogram import types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from keyboards.inline import search_kb, interes_kb, profi_kb
from keyboards.default import main_kb
from states import Networking, Anketa
from sql import User


@dp.message_handler(Text(contains='–Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥', ignore_case=True))
async def start(message: Message, state: FSMContext):
    try:
        user = User.get(User.tg_id == message.from_user.id)

        if user.age == None:
            await message.answer("–ü–æ—Ö–æ–∂–µ –≤—ã —É –Ω–∞—Å –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –æ —Å–µ–±–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏.")
            await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ", reply_markup=ReplyKeyboardMarkup([
        [KeyboardButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
    ], resize_keyboard=True))
            await Anketa.photo.set()
            return 0

        if datetime.datetime.strptime(user.dead_line.split('.')[0], "%Y-%m-%d %H:%M:%S") > datetime.datetime.today():
            data = {
                'age_min': 0,
                'len_min': 0,
                'age_max': 10000,
                'len_max': 10000,
                'weight_min': 0,
                'weight_max': 10000
            }

            # Clear keyboard
            _ck_ = await message.answer('<code>Clearing keyboard...</code>', reply_markup=types.ReplyKeyboardRemove())
            await _ck_.delete()

            await message.answer("–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏. \n–î–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ "
                                 "—Ñ–∏–ª—å—Ç—Ä—ã –∏ "
                                 "–Ω–∞–∂–º–∏—Ç–µ –Ω–∞–π—Ç–∏",
                                 reply_markup=search_kb)
            await Networking.started.set()
            await state.update_data(data)

        else:
            await message.answer(
                "–£–ø—Å... \n""–£ –≤–∞—Å –∑–∞–∫–æ–Ω—Ñ–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞ \n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª —Ç–∞—Ä–∏—Ñ—ã –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É")

    except Exception as e:
        # print(e)
        await message.answer("–£–ø—Å... \n""–£ –≤–∞—Å –∑–∞–∫–æ–Ω—Ñ–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞ \n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª —Ç–∞—Ä–∏—Ñ—ã –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É")


@dp.message_handler(content_types=['photo'], state=Anketa.photo)
async def set_photo(message: types.Message, state: FSMContext):
    user = User.get(User.tg_id == message.from_user.id)
    user.photo = message.photo[-1].file_id
    user.save()
    
    data = {
            'market': '‚ùå',
            'konsalt': '‚ùå',
            'bloger': '‚ùå',
            'freelancer': '‚ùå',
            'design': '‚ùå',
            'shop': '‚ùå',
            'buissnes': '‚ùå',
            'iskustvo': '‚ùå',
            'buti': '‚ùå',
            'it': '‚ùå',
            'psih': '‚ùå',
            'eat': '‚ùå',
            'stroy': '‚ùå',
            'soc': '‚ùå'
    }

    await state.update_data(data)

    await Anketa.profi.set()
    await message.answer("–ö–µ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å? –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π.", reply_markup=profi_kb(data))


@dp.callback_query_handler(state=Anketa.profi)
async def set_profi_kb(c: types.CallbackQuery, state: FSMContext):
    if c.data == 'compleet':
        data = await state.get_data()
        data_text = {
            'market': '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
            'konsalt': '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥',
            'bloger': '–ë–ª–æ–≥–µ—Ä',
            'freelancer': '–§—Ä–∏–ª–∞–Ω—Å–µ—Ä',
            'design': '–î–∏–∑–∞–π–Ω',
            'shop': '–¢–æ—Ä–≥–æ–≤–ª—è',
            'buissnes': '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å',
            'iskustvo': '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫',
            'buti': '–ë—å—é—Ç–∏',
            'it': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç',
            'psih': '–ü—Å–∏—Ö–æ–ª–æ–≥',
            'eat': '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã',
            'stroy': '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
            'soc': '–°–æ—Ü —Ä–∞–±–æ—Ç–Ω–∏–∫'
        }

        text = ''

        for el in data:
            if data[el] == '‚úÖ':
                text += f'{data_text[el]}, '

        text = text[:-2]

        user = User.get(User.tg_id == c.from_user.id)
        user.profession = text
        user.save()

        data = {
            'sport': '‚ùå',
            'walk': '‚ùå',
            'osozn': '‚ùå',
            'mistik': '‚ùå',
            'money': '‚ùå',
            'dance': '‚ùå',
            'health': '‚ùå',
            'alko': '‚ùå',
            'musik': '‚ùå',
            'moda': '‚ùå',
        }

        await state.finish()
        await Anketa.field_activity.set()
        await state.update_data(data)

        await c.message.edit_text(text="–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=interes_kb(data))

    else:
        data = await state.get_data()
        data[c.data] = '‚úÖ' if data[c.data] == '‚ùå' else '‚ùå'
        await state.update_data(data)

        await c.message.edit_text(text="–ö–µ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å? –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π.", reply_markup=profi_kb(data))


@dp.message_handler(state=Anketa.profi)
async def set_interes(message: types.Message, state: FSMContext):
    user = User.get(User.tg_id == message.from_user.id)
    user.profession = message.text
    user.save()

    data = {
        'sport': '‚ùå',
        'walk': '‚ùå',
        'osozn': '‚ùå',
        'mistik': '‚ùå',
        'money': '‚ùå',
        'dance': '‚ùå',
        'health': '‚ùå',
        'alko': '‚ùå',
        'musik': '‚ùå',
        'moda': '‚ùå',
    }

    await state.update_data(data)

    await Anketa.field_activity.set()
    await message.answer("–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=interes_kb(data))


@dp.callback_query_handler(state=Anketa.field_activity)
async def set_interes_kb(c: types.CallbackQuery, state: FSMContext):
    if c.data == 'compleet':
        data = await state.get_data()
        data_text = {
            'sport': '—Å–ø–æ—Ä—Ç',
            'walk': '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
            'osozn': '–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å',
            'mistik': '–º–∏—Å—Ç–∏–∫–∞',
            'money': '—Ñ–∏–Ω–∞–Ω—Å—ã',
            'dance': '—Ç—É—Å–æ–≤–∫–∏',
            'health': '–ó–û–ñ',
            'alko': '–≤–∏–Ω–∏—à–∫–æ',
            'musik': '–º—É–∑—ã–∫–∞',
            'moda': '–º–æ–¥–∞',
        }

        text = ''

        for el in data:
            if data[el] == '‚úÖ':
                text += f'{data_text[el]}, '

        text = text[:-2]

        user = User.get(User.tg_id == c.from_user.id)
        user.field_activity = text
        user.save()

        await Anketa.lenght.set()
        await c.message.answer("–ö–∞–∫–æ–≥–æ –≤—ã —Ä–æ—Å—Ç–∞(–≤ —Å–º):")

    else:
        data = await state.get_data()
        data[c.data] = '‚úÖ' if data[c.data] == '‚ùå' else '‚ùå'
        await state.update_data(data)

        await c.message.edit_text(text="–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=interes_kb(data))


@dp.message_handler(state=Anketa.field_activity)
async def activity(message: types.Message, state: FSMContext):
    text = message.text
    if len(text) > 10:

        user = User.get(User.tg_id == message.from_user.id)
        user.field_activity = text
        user.save()

        await Anketa.lenght.set()
        await message.answer("–ö–∞–∫–æ–≥–æ –≤—ã —Ä–æ—Å—Ç–∞(–≤ —Å–º):")

    else:
        data = await state.get_data()
        await Anketa.field_activity.set()
        await message.answer("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö", reply_markup=interes_kb(data))


@dp.message_handler(state=Anketa.lenght)
async def leng(message: types.Message):
    user = User.get(User.tg_id == message.from_user.id)
    user.length = message.text
    user.save()

    await Anketa.weight.set()
    await message.answer("–í–∞—à –≤–µ—Å:")


@dp.message_handler(state=Anketa.weight)
async def weight(message: types.Message):
    user = User.get(User.tg_id == message.from_user.id)
    user.weight = message.text
    user.save()

    await Anketa.age.set()
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç:")


@dp.message_handler(state=Anketa.age)
async def age(message: types.Message, state: FSMContext):
    user = User.get(User.tg_id == message.from_user.id)
    user.age = message.text
    user.save()

    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                 reply_markup=main_kb)
    await state.finish()
