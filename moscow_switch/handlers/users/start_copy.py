import datetime
from aiogram.dispatcher.filters import Text
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, \
    ReplyKeyboardRemove
from aiogram.dispatcher.filters.builtin import CommandStart

from loader import dp, bot

from keyboards.default.main_menu import main_kb
from sql.User import User
from states.anketa import Anketa
from aiogram.dispatcher.storage import FSMContext


@dp.message_handler(CommandStart(), state='*')
async def bot_start(message: types.Message, state: FSMContext):
    await state.finish()
    try:
        user = User.get(User.tg_id == message.from_user.id)
    except:
        user = User()
        user.tg_id = message.from_user.id
        user.name = 'register'
        user.status = 'Normal'
        user.save()

    await bot.send_photo(
        chat_id=message.from_user.id,
        photo=types.InputFile('img/start.png'),
        caption=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n" \
                f"–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ SWITCH ‚Äî —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π. \n"
                f"SWITCH –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å –∏ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–±–æ—Ä–∫–æ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –∏ –ª—é–±–æ–ø—ã—Ç–Ω—ã—Ö –º–µ—Å—Ç –≤ "
                f"–ú–æ—Å–∫–≤–µ. \n"
                f"–î–ª—è –æ–¥–Ω–æ–≥–æ –∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏. \n"
                f"–î–∞–≤–∞–π –Ω–∞–ø–æ–ª–Ω–∏–º —Ç–≤–æ—é –∂–∏–∑–Ω—å –Ω–æ–≤—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏. –ü–æ–µ—Ö–∞–ª–∏! üöÄ \n",
        reply_markup=main_kb
    )

    if not (user.phone):
        await message.answer('–ù–∞—à –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ')
        await Anketa.phone.set()
        await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                             reply_markup=ReplyKeyboardMarkup(
                                 [[KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)]],
                                 resize_keyboard=True
                             )
                             )


@dp.message_handler(content_types=['contact'], state=Anketa.phone)
async def phone(message: types.Message):
    print(message.contact)
    user = User.get(User.tg_id == message.from_user.id)
    user.phone = message.contact['phone_number']
    user.tarif = '–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 7 –¥–Ω–µ–π'
    user.save()

    await Anketa.photo.set()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:', reply_markup=ReplyKeyboardRemove())


@dp.message_handler(content_types=['photo'], state=Anketa.photo)
async def set_photo(message: types.Message):
    user = User.get(User.tg_id == message.from_user.id)
    user.photo = message.photo[-1].file_id
    user.save()

    await Anketa.name.set()
    await message.answer("–í–∞—à–µ –∏–º—è:", reply_markup=ReplyKeyboardMarkup([
        [KeyboardButton(message.from_user.full_name)]
    ], resize_keyboard=True))


@dp.message_handler(state=Anketa.name)
async def name(message: types.Message):
    user = User.get(User.tg_id == message.from_user.id)
    user.name = message.text
    user.save()

    await Anketa.field_activity.set()
    await message.answer("–ù–∞–ø–∏—à–∏ –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö, —á–µ–º —Ç—ã —É–≤–ª–µ–∫–∞–µ—à—å—Å—è?", reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state=Anketa.field_activity)
async def activity(message: types.Message):
    text = message.text
    if len(text) > 10:

        user = User.get(User.tg_id == message.from_user.id)
        user.field_activity = text
        user.save()

        await Anketa.lenght.set()
        await message.answer("–ö–∞–∫–æ–≥–æ –≤—ã —Ä–æ—Å—Ç–∞(–≤ —Å–º):")

    else:

        await Anketa.field_activity.set()
        await message.answer("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ:", reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state=Anketa.lenght)
async def leng(message: types.Message):
    user = User.get(User.tg_id == message.from_user.id)
    user.length = message.text
    user.save()

    await Anketa.weight.set()
    await message.answer("–í–∞—à –≤–µ—Å:")


@dp.message_handler(state=Anketa.weight)
async def weight(message: types.Message):
    user = User.get(User.tg_id == message.from_user.id)
    user.weight = message.text
    user.save()

    await Anketa.age.set()
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç:")


@dp.message_handler(state=Anketa.age)
async def age(message: types.Message, state: FSMContext):
    user = User.get(User.tg_id == message.from_user.id)
    user.age = message.text
    user.dead_line = datetime.datetime.today() + datetime.timedelta(days=7)
    user.save()

    await state.finish()

    await message.answer("–í—ã –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=main_kb)
    # await message.answer(
    #    f"–£ –≤–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 7 –¥–Ω–µ–π. –ü–æ –µ—ë –∏—Å—Ç–µ—á–µ–Ω–∏—é –≤–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª "
    #    f"–¢–∞—Ä–∏—Ñ—ã –∏ –æ–ø–ª–∞—Ç–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")


@dp.message_handler(Text(contains='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', ignore_case=True), state='*')
async def main_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_kb)


@dp.callback_query_handler(text='main_menu', state='*')
async def main_menu_inline(c: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await c.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_kb)
